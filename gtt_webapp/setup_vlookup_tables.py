#!/usr/bin/env python3
"""
Setup script to create vlookup tables for GTT application
This script creates the NIFTY_MCAP and STOCK_DATA tables for symbol and price lookup
"""

import os
import sys
from datetime import datetime, date
import logging

# Add the current directory to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_oracle_tables():
    """Create tables using Oracle DB directly"""
    try:
        import oracledb
        from db_config import configuration
        
        logger.info("Creating vlookup tables using Oracle DB...")
        
        with oracledb.connect(**configuration['db_config']) as connection:
            with connection.cursor() as cursor:
                
                # Create NIFTY_MCAP table
                logger.info("Creating NIFTY_MCAP table...")
                try:
                    cursor.execute("""
                        CREATE TABLE NIFTY_MCAP (
                            symbol VARCHAR2(20 BYTE) PRIMARY KEY,
                            company_name VARCHAR2(200 BYTE),
                            mcap_lakhs NUMBER(20),
                            nifty_rank NUMBER,
                            him_rating VARCHAR2(500 BYTE),
                            rating_date DATE
                        )
                    """)
                    logger.info("‚úÖ NIFTY_MCAP table created successfully")
                except Exception as e:
                    if "name is already used" in str(e).lower():
                        logger.info("‚ÑπÔ∏è NIFTY_MCAP table already exists")
                    else:
                        logger.error(f"‚ùå Error creating NIFTY_MCAP table: {e}")
                
                # Create STOCK_DATA table
                logger.info("Creating STOCK_DATA table...")
                try:
                    cursor.execute("""
                        CREATE TABLE STOCK_DATA (
                            id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                            symbol VARCHAR2(20 BYTE) NOT NULL,
                            date1 DATE NOT NULL,
                            last_price NUMBER(10, 2),
                            open_price NUMBER(10, 2),
                            high_price NUMBER(10, 2),
                            low_price NUMBER(10, 2),
                            volume NUMBER(20)
                        )
                    """)
                    logger.info("‚úÖ STOCK_DATA table created successfully")
                except Exception as e:
                    if "name is already used" in str(e).lower():
                        logger.info("‚ÑπÔ∏è STOCK_DATA table already exists")
                    else:
                        logger.error(f"‚ùå Error creating STOCK_DATA table: {e}")
                
                # Create indexes for better performance
                logger.info("Creating indexes...")
                try:
                    cursor.execute("CREATE INDEX idx_stock_symbol ON STOCK_DATA(symbol)")
                    cursor.execute("CREATE INDEX idx_stock_date ON STOCK_DATA(date1)")
                    cursor.execute("CREATE INDEX idx_stock_symbol_date ON STOCK_DATA(symbol, date1)")
                    logger.info("‚úÖ Indexes created successfully")
                except Exception as e:
                    if "name is already used" in str(e).lower():
                        logger.info("‚ÑπÔ∏è Indexes already exist")
                    else:
                        logger.warning(f"‚ö†Ô∏è Warning creating indexes: {e}")
                
                # Insert sample data for testing
                logger.info("Inserting sample data...")
                insert_sample_data(cursor)
                
                connection.commit()
                logger.info("‚úÖ Database setup completed successfully!")
                
    except Exception as e:
        logger.error(f"‚ùå Error setting up Oracle tables: {e}")
        raise

def insert_sample_data(cursor):
    """Insert sample data for testing"""
    try:
        # Sample NIFTY_MCAP data
        nifty_data = [
            ('RELIANCE', 'Reliance Industries Limited', 1650000, 1, 'BUY - Strong fundamentals', date(2024, 12, 1)),
            ('TCS', 'Tata Consultancy Services Limited', 1400000, 2, 'BUY - IT sector leader', date(2024, 12, 1)),
            ('HDFCBANK', 'HDFC Bank Limited', 1200000, 3, 'BUY - Banking sector strong', date(2024, 12, 1)),
            ('INFY', 'Infosys Limited', 750000, 4, 'HOLD - IT sector consolidation', date(2024, 12, 1)),
            ('ICICIBANK', 'ICICI Bank Limited', 700000, 5, 'BUY - Growing market share', date(2024, 12, 1)),
            ('HINDUNILVR', 'Hindustan Unilever Limited', 650000, 6, 'HOLD - FMCG stable', date(2024, 12, 1)),
            ('ITC', 'ITC Limited', 550000, 7, 'HOLD - Diversification ongoing', date(2024, 12, 1)),
            ('SBIN', 'State Bank of India', 500000, 8, 'BUY - PSU bank recovery', date(2024, 12, 1)),
            ('BHARTIARTL', 'Bharti Airtel Limited', 450000, 9, 'BUY - Telecom growth', date(2024, 12, 1)),
            ('KOTAKBANK', 'Kotak Mahindra Bank Limited', 400000, 10, 'BUY - Premium banking', date(2024, 12, 1))
        ]
        
        cursor.executemany("""
            INSERT INTO NIFTY_MCAP (symbol, company_name, mcap_lakhs, nifty_rank, him_rating, rating_date)
            VALUES (:1, :2, :3, :4, :5, :6)
        """, nifty_data)
        
        logger.info(f"‚úÖ Inserted {len(nifty_data)} records into NIFTY_MCAP")
        
        # Sample STOCK_DATA - recent prices
        stock_data = [
            ('RELIANCE', date(2024, 12, 25), 2850.50, 2840.00, 2865.75, 2835.25, 1250000),
            ('TCS', date(2024, 12, 25), 4125.30, 4100.00, 4135.80, 4095.50, 980000),
            ('HDFCBANK', date(2024, 12, 25), 1685.75, 1675.00, 1692.25, 1670.80, 1150000),
            ('INFY', date(2024, 12, 25), 1825.40, 1810.00, 1835.60, 1805.75, 850000),
            ('ICICIBANK', date(2024, 12, 25), 1265.85, 1255.00, 1275.30, 1250.40, 1050000),
            ('HINDUNILVR', date(2024, 12, 25), 2425.60, 2410.00, 2435.80, 2405.25, 650000),
            ('ITC', date(2024, 12, 25), 485.30, 480.00, 488.75, 478.50, 1800000),
            ('SBIN', date(2024, 12, 25), 825.45, 820.00, 832.60, 815.75, 1450000),
            ('BHARTIARTL', date(2024, 12, 25), 1650.20, 1640.00, 1658.80, 1635.50, 950000),
            ('KOTAKBANK', date(2024, 12, 25), 1785.75, 1775.00, 1795.30, 1770.25, 750000)
        ]
        
        cursor.executemany("""
            INSERT INTO STOCK_DATA (symbol, date1, last_price, open_price, high_price, low_price, volume)
            VALUES (:1, :2, :3, :4, :5, :6, :7)
        """, stock_data)
        
        logger.info(f"‚úÖ Inserted {len(stock_data)} records into STOCK_DATA")
        
    except Exception as e:
        if "unique constraint" in str(e).lower():
            logger.info("‚ÑπÔ∏è Sample data already exists")
        else:
            logger.warning(f"‚ö†Ô∏è Warning inserting sample data: {e}")

def create_sqlalchemy_tables():
    """Create tables using SQLAlchemy (if Flask app is available)"""
    try:
        from app import create_app, db
        from models.models import NiftyMcap, StockData
        
        logger.info("Creating vlookup tables using SQLAlchemy...")
        
        app = create_app()
        with app.app_context():
            # Create tables
            db.create_all()
            logger.info("‚úÖ SQLAlchemy tables created successfully!")
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è SQLAlchemy table creation failed (expected if Flask not configured): {e}")

def main():
    """Main setup function"""
    logger.info("üöÄ Starting vlookup tables setup...")
    logger.info("=" * 60)
    
    try:
        # Try Oracle DB approach first (primary)
        create_oracle_tables()
        
        # Try SQLAlchemy approach (secondary)
        create_sqlalchemy_tables()
        
        logger.info("=" * 60)
        logger.info("üéâ Vlookup tables setup completed successfully!")
        logger.info("")
        logger.info("üìã What was created:")
        logger.info("   ‚úÖ NIFTY_MCAP table (for company name lookup)")
        logger.info("   ‚úÖ STOCK_DATA table (for latest price lookup)")
        logger.info("   ‚úÖ Sample data for testing")
        logger.info("   ‚úÖ Performance indexes")
        logger.info("")
        logger.info("üîß Next steps:")
        logger.info("   1. Load your actual data into these tables")
        logger.info("   2. Test the symbol auto-population in the webapp")
        logger.info("   3. Verify price lookup is working")
        
    except Exception as e:
        logger.error(f"‚ùå Setup failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
